// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: payment/pkg/paymentproto/payment.proto

package paymentproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayResponse, error)
	AuthorizeCard(ctx context.Context, in *AuthorizeCardRequest, opts ...grpc.CallOption) (*AuthorizeCardResponse, error)
	RegisterRecipient(ctx context.Context, in *RegisterRecipientRequest, opts ...grpc.CallOption) (*RegisterRecipientResponse, error)
	UpdateRecipient(ctx context.Context, in *UpdateRecipientRequest, opts ...grpc.CallOption) (*UpdateRecipientResponse, error)
	GetMyPaymentMethods(ctx context.Context, in *GetMyPaymentMethodsRequest, opts ...grpc.CallOption) (*GetMyPaymentMethodsResponse, error)
	UpdateDefaultPaymentMethod(ctx context.Context, in *UpdateDefaultPaymentMethodRequest, opts ...grpc.CallOption) (*UpdateDefaultPaymentMethodResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayResponse, error) {
	out := new(PayResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) AuthorizeCard(ctx context.Context, in *AuthorizeCardRequest, opts ...grpc.CallOption) (*AuthorizeCardResponse, error) {
	out := new(AuthorizeCardResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/AuthorizeCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RegisterRecipient(ctx context.Context, in *RegisterRecipientRequest, opts ...grpc.CallOption) (*RegisterRecipientResponse, error) {
	out := new(RegisterRecipientResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/RegisterRecipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdateRecipient(ctx context.Context, in *UpdateRecipientRequest, opts ...grpc.CallOption) (*UpdateRecipientResponse, error) {
	out := new(UpdateRecipientResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/UpdateRecipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetMyPaymentMethods(ctx context.Context, in *GetMyPaymentMethodsRequest, opts ...grpc.CallOption) (*GetMyPaymentMethodsResponse, error) {
	out := new(GetMyPaymentMethodsResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/GetMyPaymentMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdateDefaultPaymentMethod(ctx context.Context, in *UpdateDefaultPaymentMethodRequest, opts ...grpc.CallOption) (*UpdateDefaultPaymentMethodResponse, error) {
	out := new(UpdateDefaultPaymentMethodResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/UpdateDefaultPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	Pay(context.Context, *PayRequest) (*PayResponse, error)
	AuthorizeCard(context.Context, *AuthorizeCardRequest) (*AuthorizeCardResponse, error)
	RegisterRecipient(context.Context, *RegisterRecipientRequest) (*RegisterRecipientResponse, error)
	UpdateRecipient(context.Context, *UpdateRecipientRequest) (*UpdateRecipientResponse, error)
	GetMyPaymentMethods(context.Context, *GetMyPaymentMethodsRequest) (*GetMyPaymentMethodsResponse, error)
	UpdateDefaultPaymentMethod(context.Context, *UpdateDefaultPaymentMethodRequest) (*UpdateDefaultPaymentMethodResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) Pay(context.Context, *PayRequest) (*PayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (UnimplementedPaymentServiceServer) AuthorizeCard(context.Context, *AuthorizeCardRequest) (*AuthorizeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeCard not implemented")
}
func (UnimplementedPaymentServiceServer) RegisterRecipient(context.Context, *RegisterRecipientRequest) (*RegisterRecipientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRecipient not implemented")
}
func (UnimplementedPaymentServiceServer) UpdateRecipient(context.Context, *UpdateRecipientRequest) (*UpdateRecipientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipient not implemented")
}
func (UnimplementedPaymentServiceServer) GetMyPaymentMethods(context.Context, *GetMyPaymentMethodsRequest) (*GetMyPaymentMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyPaymentMethods not implemented")
}
func (UnimplementedPaymentServiceServer) UpdateDefaultPaymentMethod(context.Context, *UpdateDefaultPaymentMethodRequest) (*UpdateDefaultPaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefaultPaymentMethod not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Pay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_AuthorizeCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AuthorizeCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/AuthorizeCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AuthorizeCard(ctx, req.(*AuthorizeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RegisterRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRecipientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RegisterRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/RegisterRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RegisterRecipient(ctx, req.(*RegisterRecipientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdateRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecipientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdateRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/UpdateRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdateRecipient(ctx, req.(*UpdateRecipientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetMyPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyPaymentMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetMyPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/GetMyPaymentMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetMyPaymentMethods(ctx, req.(*GetMyPaymentMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdateDefaultPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdateDefaultPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/UpdateDefaultPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdateDefaultPaymentMethod(ctx, req.(*UpdateDefaultPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pay",
			Handler:    _PaymentService_Pay_Handler,
		},
		{
			MethodName: "AuthorizeCard",
			Handler:    _PaymentService_AuthorizeCard_Handler,
		},
		{
			MethodName: "RegisterRecipient",
			Handler:    _PaymentService_RegisterRecipient_Handler,
		},
		{
			MethodName: "UpdateRecipient",
			Handler:    _PaymentService_UpdateRecipient_Handler,
		},
		{
			MethodName: "GetMyPaymentMethods",
			Handler:    _PaymentService_GetMyPaymentMethods_Handler,
		},
		{
			MethodName: "UpdateDefaultPaymentMethod",
			Handler:    _PaymentService_UpdateDefaultPaymentMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/pkg/paymentproto/payment.proto",
}
